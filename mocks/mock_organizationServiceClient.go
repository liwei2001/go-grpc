// Code generated by MockGen. DO NOT EDIT.
// Source: scytale/organization/organization (interfaces: OrganizationServiceClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
	organization "scytale/organization/organization"
)

// MockOrganizationServiceClient is a mock of OrganizationServiceClient interface
type MockOrganizationServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationServiceClientMockRecorder
}

// MockOrganizationServiceClientMockRecorder is the mock recorder for MockOrganizationServiceClient
type MockOrganizationServiceClientMockRecorder struct {
	mock *MockOrganizationServiceClient
}

// NewMockOrganizationServiceClient creates a new mock instance
func NewMockOrganizationServiceClient(ctrl *gomock.Controller) *MockOrganizationServiceClient {
	mock := &MockOrganizationServiceClient{ctrl: ctrl}
	mock.recorder = &MockOrganizationServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrganizationServiceClient) EXPECT() *MockOrganizationServiceClientMockRecorder {
	return m.recorder
}

// CreateOrganization mocks base method
func (m *MockOrganizationServiceClient) CreateOrganization(arg0 context.Context, arg1 *organization.CreateOrganizationRequest, arg2 ...grpc.CallOption) (*organization.OrganizationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrganization", varargs...)
	ret0, _ := ret[0].(*organization.OrganizationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganization indicates an expected call of CreateOrganization
func (mr *MockOrganizationServiceClientMockRecorder) CreateOrganization(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockOrganizationServiceClient)(nil).CreateOrganization), varargs...)
}

// CreateUser mocks base method
func (m *MockOrganizationServiceClient) CreateUser(arg0 context.Context, arg1 *organization.CreateUserRequest, arg2 ...grpc.CallOption) (*organization.UserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUser", varargs...)
	ret0, _ := ret[0].(*organization.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockOrganizationServiceClientMockRecorder) CreateUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockOrganizationServiceClient)(nil).CreateUser), varargs...)
}

// FetchOrganizationList mocks base method
func (m *MockOrganizationServiceClient) FetchOrganizationList(arg0 context.Context, arg1 *organization.Empty, arg2 ...grpc.CallOption) (*organization.OrganizationListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchOrganizationList", varargs...)
	ret0, _ := ret[0].(*organization.OrganizationListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchOrganizationList indicates an expected call of FetchOrganizationList
func (mr *MockOrganizationServiceClientMockRecorder) FetchOrganizationList(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOrganizationList", reflect.TypeOf((*MockOrganizationServiceClient)(nil).FetchOrganizationList), varargs...)
}

// FetchUserList mocks base method
func (m *MockOrganizationServiceClient) FetchUserList(arg0 context.Context, arg1 *organization.Empty, arg2 ...grpc.CallOption) (*organization.UserListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchUserList", varargs...)
	ret0, _ := ret[0].(*organization.UserListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserList indicates an expected call of FetchUserList
func (mr *MockOrganizationServiceClientMockRecorder) FetchUserList(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserList", reflect.TypeOf((*MockOrganizationServiceClient)(nil).FetchUserList), varargs...)
}

// FetchUserListByOrganization mocks base method
func (m *MockOrganizationServiceClient) FetchUserListByOrganization(arg0 context.Context, arg1 *organization.ByOrganizationRequest, arg2 ...grpc.CallOption) (*organization.UserListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchUserListByOrganization", varargs...)
	ret0, _ := ret[0].(*organization.UserListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserListByOrganization indicates an expected call of FetchUserListByOrganization
func (mr *MockOrganizationServiceClientMockRecorder) FetchUserListByOrganization(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserListByOrganization", reflect.TypeOf((*MockOrganizationServiceClient)(nil).FetchUserListByOrganization), varargs...)
}
